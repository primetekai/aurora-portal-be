import {
  Controller,
  Get,
  Res,
  HttpStatus,
  Logger,
  Query,
  HttpException,
} from '@nestjs/common';
import { CrawlService } from './crawl-view-360.service';
import { ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';
import { CRAWL_SERVICE } from 'src/config';
import { Response } from 'express';

@Controller(CRAWL_SERVICE)
@ApiTags('crawl')
export class CrawlController {
  private logger = new Logger('CrawlController');

  constructor(private crawlService: CrawlService) {}

  @Get('generate-image')
  @ApiQuery({
    name: 'url',
    required: true,
    description: 'URL c·ªßa trang web c·∫ßn ch·ª•p h√¨nh',
  })
  @ApiQuery({
    name: 'source',
    required: true,
    description: 'Ngu·ªìn c·ªßa trang web (e.g., facebook, google)',
  })
  @ApiResponse({ status: 200, description: 'Tr·∫£ v·ªÅ file ·∫£nh c·ªßa trang web' })
  @ApiResponse({
    status: 400,
    description: 'URL ho·∫∑c ngu·ªìn kh√¥ng h·ª£p l·ªá',
  })
  async generateImage(
    @Query('url') url: string,
    @Query('source') source: string,
    @Res() res: Response,
  ) {
    try {
      const base64Image = await this.crawlService.crawlSnapShotScreenWeb(
        url,
        source,
      );
      res.set({ 'Content-Type': 'application/json' });
      return res.json({ base64: `data:image/png;base64,${base64Image}` });
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o ·∫£nh ch·ª•p m√†n h√¨nh:', error);
      throw new HttpException(
        'Kh√¥ng th·ªÉ t·∫°o ·∫£nh ch·ª•p m√†n h√¨nh',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  @Get('generate-image-view-360')
  @ApiQuery({
    name: 'location',
    required: true,
    description: 'V·ªã tr√≠ mu·ªën ch·ª•p ·∫£nh 360 ƒë·ªô',
  })
  @ApiResponse({
    status: 200,
    description: 'Tr·∫£ v·ªÅ URL c·ªßa video 360 t·ª´ MinIO',
  })
  @ApiResponse({
    status: 400,
    description: 'V·ªã tr√≠ kh√¥ng h·ª£p l·ªá!',
  })
  @ApiResponse({
    status: 500,
    description: 'L·ªói trong qu√° tr√¨nh ch·ª•p ·∫£nh',
  })
  async generateImage360(
    @Query('location') location: string,
    @Res() res: Response,
  ) {
    if (!location) {
      throw new HttpException(
        '‚ùå Thi·∫øu tham s·ªë location!',
        HttpStatus.BAD_REQUEST,
      );
    }

    try {
      console.log(`üåç B·∫Øt ƒë·∫ßu ch·ª•p ·∫£nh 360 ƒë·ªô t·∫°i v·ªã tr√≠: ${location}`);

      // üìå L·∫•y ƒë∆∞·ªùng link t·∫£i video t·ª´ MinIO
      const result = await this.crawlService.crawlCaptureGoogleEarth(location);

      if (!result || !result.downloadUrl) {
        throw new Error('L·ªói khi t·∫£i video l√™n MinIO');
      }

      console.log(`‚úÖ Video ƒë√£ t·∫£i l√™n MinIO: ${result.downloadUrl}`);

      res.set({ 'Content-Type': 'application/json' });
      return res.json({
        message: '‚úÖ Th√†nh c√¥ng!',
        downloadUrl: result.downloadUrl, // Tr·∫£ v·ªÅ URL video t·ª´ MinIO
      });
    } catch (error) {
      console.error('‚ùå L·ªói khi ch·ª•p ·∫£nh Google Earth 360:', error);
      throw new HttpException(
        'Kh√¥ng th·ªÉ t·∫°o video 360 ƒë·ªô',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}
