import puppeteer from 'puppeteer-extra';
import StealthPlugin from 'puppeteer-extra-plugin-stealth';
import type { Page } from 'puppeteer';

puppeteer.use(StealthPlugin());

export const captureGoogleEarthV1 = async (
  location: string,
): Promise<string> => {
  const browser = await puppeteer.launch({
    headless: false, // üî• Quan s√°t tr√¨nh duy·ªát ch·∫°y
    defaultViewport: {
      width: 1920,
      height: 1080,
    }, // üî• ƒê·∫∑t k√≠ch th∆∞·ªõc m√†n h√¨nh c·ªë ƒë·ªãnh
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-web-security',
      '--disable-features=IsolateOrigins',
      '--ignore-certificate-errors',
    ],
  });

  const page = await browser.newPage();
  await page.setUserAgent(
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
  );

  try {
    console.log(`üîç Opening Google Earth...`);

    // M·ªü Google Earth Web
    await page.goto('https://earth.google.com/web/', {
      waitUntil: 'networkidle2',
    });

    // ƒê·ª£i Google Earth t·∫£i ho√†n to√†n
    await delay(5000);

    // Click v√†o √¥ t√¨m ki·∫øm
    await clickSearchInput(page);

    // G√µ t·ªça ƒë·ªô v√† nh·∫•n Enter
    await page.keyboard.type(location, { delay: 100 });
    await page.keyboard.press('Enter');

    // ƒê·ª£i Google Earth zoom ho√†n t·∫•t
    await delay(5000);

    // üîÑ **Reload trang ƒë·ªÉ l√†m m·ªõi UI**
    console.log('üîÑ Reloading Google Earth Web...');
    await page.reload({ waitUntil: 'networkidle2' });

    // ƒê·ª£i trang load l·∫°i ho√†n to√†n
    await delay(5000);

    // **Click v√†o t·ªça ƒë·ªô (50, 150) ƒë·ªÉ ·∫©n UI**
    await hideUI(page, 880, 995);

    // Ch·ªù UI ·∫©n ho√†n to√†n tr∆∞·ªõc khi th·ª±c hi·ªán thao t√°c ti·∫øp theo
    await delay(3000);

    await hideUI(page, 1869, 735);

    // üñ±Ô∏è **Click chu·ªôt ph·∫£i gi·ªØa m√†n h√¨nh ƒë·ªÉ m·ªü dropdown**
    // await rightClickCenter(page);

    // // üñ±Ô∏è **Di chu·ªôt qua ph·∫£i 50px v√† xu·ªëng d∆∞·ªõi 80px r·ªìi click**
    // await moveAndClickDropdown(page, 50, 135);

    // Ch·ªù UI c·∫≠p nh·∫≠t tr∆∞·ªõc khi ch·ª•p ·∫£nh
    await delay(3000);

    // Ch·ª•p m√†n h√¨nh sau khi th·ª±c hi·ªán xong t·∫•t c·∫£ thao t√°c
    console.log('üì∏ Capturing screenshot...');
    const screenshot = await page.screenshot({
      fullPage: true,
      encoding: 'base64',
    });

    return screenshot;
  } catch (error) {
    console.error('‚ùå Error capturing Google Earth screenshot:', error);
    await browser.close();
    throw error;
  }
};

// üñ±Ô∏è Click ch√≠nh x√°c v√†o √¥ t√¨m ki·∫øm
const clickSearchInput = async (page: Page) => {
  console.log('üñ±Ô∏è Clicking on the search input...');

  const x = 185; // V·ªã tr√≠ x c·ªßa √¥ t√¨m ki·∫øm
  const y = 32; // V·ªã tr√≠ y c·ªßa √¥ t√¨m ki·∫øm

  await page.mouse.click(x, y);
  console.log(`‚úÖ Clicked on search input at: (${x}, ${y})`);
};

// üñ±Ô∏è Click v√†o v·ªã tr√≠ (50, 150) ƒë·ªÉ ·∫©n UI sau khi reload
const hideUI = async (page: Page, x: number, y: number) => {
  console.log(`üñ±Ô∏è Clicking at (${x}, ${y}) to hide UI...`);

  // Click 2 l·∫ßn ƒë·ªÉ ch·∫Øc ch·∫Øn UI bi·∫øn m·∫•t
  for (let i = 0; i < 2; i++) {
    await page.mouse.click(x, y);
    await delay(500);
  }

  console.log(`‚úÖ Clicked at (${x}, ${y}) to hide UI.`);
};

// üñ±Ô∏è **Click chu·ªôt ph·∫£i gi·ªØa m√†n h√¨nh ƒë·ªÉ m·ªü dropdown**
const rightClickCenter = async (page: Page) => {
  console.log('üñ±Ô∏è Right-clicking at the center of the screen...');

  const x = 960; // Gi·ªØa m√†n h√¨nh (1920/2)
  const y = 540; // Gi·ªØa m√†n h√¨nh (1080/2)

  await page.mouse.click(x, y, { button: 'right' });
  await delay(1000); // Ch·ªù menu dropdown xu·∫•t hi·ªán

  console.log(`‚úÖ Right-clicked at (${x}, ${y})`);
};

// üñ±Ô∏è **Di chu·ªôt qua ph·∫£i 50px v√† xu·ªëng d∆∞·ªõi 80px r·ªìi click**
const moveAndClickDropdown = async (
  page: Page,
  moveX: number,
  moveY: number,
) => {
  console.log(
    `üñ±Ô∏è Moving mouse to select dropdown option (${moveX}px right, ${moveY}px down)...`,
  );

  const startX = 960; // Gi·ªØa m√†n h√¨nh (1920/2)
  const startY = 540; // Gi·ªØa m√†n h√¨nh (1080/2)

  const targetX = startX + moveX;
  const targetY = startY + moveY;

  await page.mouse.move(targetX, targetY);
  await delay(500); // ƒê·ª£i chu·ªôt ·ªïn ƒë·ªãnh ·ªü v·ªã tr√≠ m·ªõi
  await page.mouse.click(targetX, targetY);

  console.log(`‚úÖ Clicked on dropdown option at (${targetX}, ${targetY})`);
};

// H√†m delay thay th·∫ø waitForTimeout
const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));
