import { Injectable, InternalServerErrorException } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';
import { PlyLoader, KSplatLoader } from '@mkkellogg/gaussian-splats-3d';

@Injectable()
export class ConvertService {
  private readonly sectionFolder = './section/uploads';

  constructor() {
    this.createSectionFolder();
  }

  private createSectionFolder() {
    if (!fs.existsSync(this.sectionFolder)) {
      fs.mkdirSync(this.sectionFolder, { recursive: true });
    }
  }

  async convertToKsplat(inputFile: string): Promise<string> {
    if (!fs.existsSync(inputFile)) {
      throw new InternalServerErrorException(
        `‚ùå File kh√¥ng t·ªìn t·∫°i: ${inputFile}`,
      );
    }

    // üìù ƒê∆∞·ªùng d·∫´n file ƒë·∫ßu ra
    const outputFile = path.join(
      this.sectionFolder,
      path.basename(inputFile).replace(/\.(ply|splat)$/, '.ksplat'),
    );

    try {
      console.log(`üöÄ ƒêang convert file: ${inputFile} ‚ûù ${outputFile}`);

      // ‚ö° Load file PLY/SPLAT v√†o GaussianSplats3D
      const splatBuffer = await PlyLoader.loadFromURL(
        `file://${path.resolve(inputFile)}`,
        () => {}, // ‚úÖ Fix l·ªói: Truy·ªÅn `onProgress` l√† m·ªôt h√†m tr·ªëng
        false, // progressiveLoad = false
        undefined, // onProgressiveLoadSectionProgress (kh√¥ng c·∫ßn)
        5, // splatAlphaRemovalThreshold
        1, // compressionLevel
        true, // optimizeSplatData
        0, // sphericalHarmonicsDegree
        {},
      );

      // üìù L∆∞u file .ksplat
      await KSplatLoader.downloadFile(splatBuffer, outputFile);

      console.log(`‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng: ${outputFile}`);

      // üóëÔ∏è X√≥a file g·ªëc sau khi convert
      fs.unlinkSync(inputFile);

      return outputFile;
    } catch (error) {
      throw new InternalServerErrorException(
        `‚ùå L·ªói khi convert: ${error.message}`,
      );
    }
  }
}
