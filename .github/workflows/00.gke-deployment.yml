name: 00.gke-deployment
on:
  workflow_call:
    inputs:
      IMAGE:
        required: true
        type: string
      DOT_ENV_FILE_NAME:
        required: true
        type: string
      PORT:
        required: true
        type: string
    secrets:
      HARBOR_URL:
        required: true
      HARBOR_USERNAME:
        required: true
      HARBOR_PASSWORD:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SERVER_IP:
        required: true
      SERVER_USER:
        required: true
      NODE_APP_DB_PASSWORD:
        required: true
      NODE_APP_DB_USERNAME:
        required: true
      NODE_APP_DB_HOSTNAME:
        required: true
      NODE_APP_DB_PORT:
        required: true

env:
  IMAGE: ${{ inputs.IMAGE }}
  DOT_ENV_FILE_NAME: ${{ inputs.DOT_ENV_FILE_NAME }}
  PORT: ${{ inputs.PORT }}
  HARBOR_URL: ${{ secrets.HARBOR_URL }}
  HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
  HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  NODE_APP_DB_PASSWORD: ${{ secrets.NODE_APP_DB_PASSWORD }}
  NODE_APP_DB_USERNAME: ${{ secrets.NODE_APP_DB_USERNAME }}
  NODE_APP_DB_HOSTNAME: ${{ secrets.NODE_APP_DB_HOSTNAME }}
  NODE_APP_DB_PORT: ${{ secrets.NODE_APP_DB_PORT }}
  GITHUB_SHA: ${{ github.sha }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Prepare dotenv
        run: |
          rm -rf .env
          echo "NODE_APP_DB_USERNAME=$NODE_APP_DB_USERNAME" >> .env
          echo "NODE_APP_DB_PORT=$NODE_APP_DB_PORT" >> .env
          echo "NODE_APP_DB_PASSWORD=$NODE_APP_DB_PASSWORD" >> .env
          echo "NODE_APP_DB_HOSTNAME=$NODE_APP_DB_HOSTNAME" >> .env
          cat $DOT_ENV_FILE_NAME >> .env

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker image
        run: docker-compose build

      - name: Log in to Harbor
        run: docker login $HARBOR_URL -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD"  

      - name: Deploy with Docker Compose
        run: docker compose push

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -p 775 $SERVER_USER@$SERVER_IP "
            docker pull $HARBOR_URL/$HARBOR_USERNAME/$IMAGE:$GITHUB_SHA &&
            docker stop $IMAGE || true &&
            docker rm $IMAGE || true &&
            podman run -d \
              --hooks-dir=/usr/share/containers/oci/hooks.d \
              --device /dev/nvidia0 \
              --device /dev/nvidiactl \
              --device /dev/nvidia-uvm \
              --device /dev/dri \
              -e NVIDIA_VISIBLE_DEVICES=all \
              -e NVIDIA_DRIVER_CAPABILITIES=all \
              -e DISPLAY=$DISPLAY \
              -v /tmp/.X11-unix:/tmp/.X11-unix \
              -v /home/primetek/resource-web/cdn:/home/ubuntu/cdn \
              -p ${PORT}:4000 \
              --name $IMAGE \
              $HARBOR_URL/$HARBOR_USERNAME/$IMAGE:$GITHUB_SHA

            # docker run -d \
            #   --runtime=nvidia --gpus all \
            #   -e NVIDIA_DRIVER_CAPABILITIES=all \
            #   -e DISPLAY=$DISPLAY \
            #   -v /tmp/.X11-unix:/tmp/.X11-unix \
            #   -v /home/primetek/resource-web/cdn:/home/ubuntu/cdn \
            #   -p ${PORT}:4000 \
            #   --name $IMAGE \
            #   $HARBOR_URL/$HARBOR_USERNAME/$IMAGE:$GITHUB_SHA

          "

